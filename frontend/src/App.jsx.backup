import React, { useState, useEffect } from 'react' 
 
function App() { 
  const [currentView, setCurrentView] = useState('home') 
  const [isLoggedIn, setIsLoggedIn] = useState(false) 
  const [showLoginModal, setShowLoginModal] = useState(false) 
  const [selectedSubject, setSelectedSubject] = useState(null) 
  const [examTimer, setExamTimer] = useState(3600) // 60分鐘 
  const [currentQuestion, setCurrentQuestion] = useState(0) 
  const [userAnswers, setUserAnswers] = useState({}) 
  const [markedQuestions, setMarkedQuestions] = useState(new Set()) 
  const [isExamActive, setIsExamActive] = useState(false) 
  const [showSubmitModal, setShowSubmitModal] = useState(false) 
  const [examResults, setExamResults] = useState(null) 
 
  const subjects = [ 
    { id: 1, name: '臨床生理學與病理學', shortName: '生理病理', description: '心電圖、肺功能、腦波檢查等' }, 
    { id: 2, name: '臨床血液學與血庫學', shortName: '血液血庫', description: '血球計數、凝血功能、血型檢驗等' }, 
    { id: 3, name: '醫學分子檢驗學與臨床鏡檢學', shortName: '分子鏡檢', description: 'PCR技術、基因定序、寄生蟲檢驗等' }, 
    { id: 4, name: '微生物學與臨床微生物學', shortName: '微生物學', description: '細菌培養、抗生素敏感性、黴菌檢驗等' }, 
    { id: 5, name: '生物化學與臨床生化學', shortName: '生物化學', description: '肝功能、腎功能、血糖檢驗等' }, 
    { id: 6, name: '臨床血清免疫學與臨床病毒學', shortName: '血清免疫', description: '腫瘤標記、自體免疫、病毒檢驗等' } 
  ] 
 
  // 生成80題模擬題目 
  const generateQuestions = (subjectId) => { 
    const subject = subjects.find(s => s.id === subjectId) 
    return Array.from({ length: 80 }, (_, i) => ({ 
      id: i + 1, 
      question: `【${subject.shortName}】第${i + 1}題：關於${subject.shortName}檢驗的敘述，下列何者正確？`, 
      options: { 
        A: `選項A：這是第${i + 1}題的第一個選項，描述${subject.shortName}的某個重要概念或檢驗方法。`, 
        B: `選項B：這是第${i + 1}題的第二個選項，說明${subject.shortName}的另一種技術或應用。`, 
        C: `選項C：這是第${i + 1}題的第三個選項，解釋${subject.shortName}相關的生理機制或病理變化。`, 
        D: `選項D：這是第${i + 1}題的第四個選項，描述${subject.shortName}的臨床意義或診斷價值。` 
      }, 
      correctAnswer: ['A', 'B', 'C', 'D'][i % 4], 
      explanation: `第${i + 1}題解析：正確答案是${['A', 'B', 'C', 'D'][i % 4]}。這題主要考察${subject.shortName}的基本概念，在實際工作中需要熟練掌握相關知識點。` 
    })) 
  } 
 
  const [examQuestions, setExamQuestions] = useState([]) 
 
  // 計時器效果 
  useEffect(() => { 
    let interval = null 
    if (isExamActive && examTimer > 0) { 
      interval = setInterval(() => { 
        setExamTimer(prev => { 
          if (prev <= 1) { 
            setIsExamActive(false) 
            handleAutoSubmit() 
            return 0 
          } 
          return prev - 1 
        }) 
      }, 1000) 
    } 
    return () => clearInterval(interval) 
  }, [isExamActive, examTimer]) 
 
  const formatTime = (seconds) => { 
    const hours = Math.floor(seconds / 3600) 
    const minutes = Math.floor((seconds % 3600) / 60) 
    const secs = seconds % 60 
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}` 
  } 
 
  const handleLogin = () => { 
    setIsLoggedIn(true) 
    setShowLoginModal(false) 
    setCurrentView('dashboard') 
  } 
 
  const startExam = (subjectId) => { 
    const subject = subjects.find(s => s.id === subjectId) 
    const questions = generateQuestions(subjectId) 
    setSelectedSubject(subject) 
    setExamQuestions(questions) 
    setCurrentView('exam') 
    setCurrentQuestion(0) 
    setExamTimer(3600) 
    setUserAnswers({}) 
    setMarkedQuestions(new Set()) 
    setIsExamActive(true) 
  } 
 
  const selectAnswer = (questionId, answer) => { 
    setUserAnswers(prev => ({...prev, [questionId]: answer})) 
  } 
 
  const toggleMark = (questionId) => { 
    setMarkedQuestions(prev => { 
      const newMarked = new Set(prev) 
      if (newMarked.has(questionId)) { 
        newMarked.delete(questionId) 
      } else { 
        newMarked.add(questionId) 
      } 
      return newMarked 
    }) 
  } 
 
  const handleAutoSubmit = () => { 
    alert('時間到！系統將自動提交您的答案。') 
    submitExam() 
  } 
 
  const submitExam = () => { 
    const correctCount = Object.entries(userAnswers).filter(([questionId, answer]) => 
      examQuestions[parseInt(questionId) - 1]?.correctAnswer === answer 
    ).length 
    const totalScore = (correctCount * 1.25).toFixed(1) 
    const percentage = ((correctCount / 80) * 100).toFixed(1) 
 
    setExamResults({ 
      correctCount, 
      totalScore, 
      percentage, 
      totalQuestions: 80, 
      answeredCount: Object.keys(userAnswers).length 
    }) 
 
    setIsExamActive(false) 
    setCurrentView('result') 
    setShowSubmitModal(false) 
  } 
 
  // 首頁視圖 
  if (currentView === 'home') { 
    return ( 
      <div> 
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100"> 
          <nav className="bg-white shadow-sm"> 
            <div className="max-w-7xl mx-auto px-4 py-4"> 
              <div className="flex justify-between items-center"> 
                <div className="flex items-center"> 
                  <h1 className="text-2xl font-bold text-gray-900">醫檢師考試系統</h1> 
                  <span className="ml-2 px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">完整版</span> 
                </div> 
                <button onClick={() => setShowLoginModal(true)} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">登入系統</button> 
              </div> 
            </div> 
          </nav> 
          <main className="max-w-7xl mx-auto py-12 px-4"> 
            <div className="text-center mb-12"> 
              <h2 className="text-4xl font-bold text-gray-900 mb-4">醫事檢驗師國家考試線上練習系統</h2> 
              <p className="text-xl text-gray-600 mb-8">完整模擬真實考試環境，每科80題限時60分鐘</p> 
              <div className="flex justify-center space-x-4"> 
                <button onClick={() => setShowLoginModal(true)} className="bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors">開始練習</button> 
                <button onClick={() => setCurrentView('demo')} className="bg-gray-100 text-gray-700 px-8 py-3 rounded-lg font-semibold hover:bg-gray-200 transition-colors">功能展示</button> 
              </div> 
            </div> 
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12"> 
              {subjects.map(subject => ( 
                <div key={subject.id} className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow"> 
                  <h3 className="text-lg font-bold text-gray-900 mb-2">{subject.name}</h3> 
                  <p className="text-gray-600 mb-4 text-sm">{subject.description}</p> 
                  <div className="flex justify-between items-center"> 
                    <span className="text-sm text-blue-600 font-semibold">80題 • 60分鐘</span> 
                    <button onClick={() => setShowLoginModal(true)} className="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-sm">開始練習</button> 
                  </div> 
                </div> 
              ))} 
            </div> 
            <div className="bg-white rounded-lg shadow-lg p-8 text-center"> 
              <h2 className="text-2xl font-bold text-gray-900 mb-4">系統特色</h2> 
              <div className="grid md:grid-cols-3 gap-8"> 
                <div> 
                  <div className="text-4xl mb-2">⏱️</div> 
                  <h3 className="text-lg font-semibold mb-2">真實考試體驗</h3> 
                  <p className="text-gray-600">60分鐘限時作答，完全模擬考場環境</p> 
                </div> 
                <div> 
                  <div className="text-4xl mb-2">📊</div> 
                  <h3 className="text-lg font-semibold mb-2">詳細成績分析</h3> 
                  <p className="text-gray-600">即時計分，答對率統計，弱點分析</p> 
                </div> 
                <div> 
                  <div className="text-4xl mb-2">📚</div> 
                  <h3 className="text-lg font-semibold mb-2">完整題庫</h3> 
                  <p className="text-gray-600">六大科目，每科80題，涵蓋考試重點</p> 
                </div> 
              </div> 
            </div> 
          </main> 
        </div> 
 
        {showLoginModal && ( 
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"> 
            <div className="bg-white rounded-lg shadow-xl p-6 max-w-md w-full mx-4"> 
              <h3 className="text-lg font-semibold text-gray-800 mb-4">系統登入</h3> 
              <div className="space-y-4"> 
                <div> 
                  <label className="block text-sm font-medium text-gray-700 mb-1">學號</label> 
                  <input type="text" defaultValue="DEMO001" className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" /> 
                </div> 
                <div> 
                  <label className="block text-sm font-medium text-gray-700 mb-1">密碼</label> 
                  <input type="password" defaultValue="demo123" className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" /> 
                </div> 
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-3"> 
                  <p className="text-sm text-blue-800"><strong>展示帳號</strong><br />學號：DEMO001 <br />密碼：demo123</p> 
                </div> 
              </div> 
              <div className="flex gap-3 mt-6"> 
                <button onClick={() => setShowLoginModal(false)} className="flex-1 py-2 px-4 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">取消</button> 
                <button onClick={handleLogin} className="flex-1 py-2 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">登入</button> 
              </div> 
            </div> 
          </div> 
        )} 
      </div> 
    ) 
  } 
 
